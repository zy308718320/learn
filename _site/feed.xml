<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EvanZhou Blog</title>
    <description>关于前端学习</description>
    <link>http://localhost:4000/learn/</link>
    <atom:link href="http://localhost:4000/learn/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 11 Mar 2019 16:44:04 +0800</pubDate>
    <lastBuildDate>Mon, 11 Mar 2019 16:44:04 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>排序算法</title>
        <description>&lt;h4 id=&quot;算法概述&quot;&gt;算法概述&lt;/h4&gt;
&lt;h5 id=&quot;十种常见排序算法可以分为两大类&quot;&gt;十种常见排序算法可以分为两大类：&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。&lt;/li&gt;
  &lt;li&gt;线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/01.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;算法复杂度&quot;&gt;算法复杂度&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/02.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;相关概念&quot;&gt;相关概念&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。&lt;/li&gt;
  &lt;li&gt;不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。&lt;/li&gt;
  &lt;li&gt;时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。&lt;/li&gt;
  &lt;li&gt;空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;冒泡排序bubble-sort&quot;&gt;冒泡排序（Bubble Sort）&lt;/h4&gt;
&lt;p&gt;冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&lt;/p&gt;
&lt;h5 id=&quot;算法描述&quot;&gt;算法描述&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换它们两个；&lt;/li&gt;
  &lt;li&gt;对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；&lt;/li&gt;
  &lt;li&gt;针对所有的元素重复以上的步骤，除了最后一个；&lt;/li&gt;
  &lt;li&gt;重复步骤1~3，直到排序完成。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/03.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function bubbleSort(arr) {
    var len = arr.length;
    for (var i = 0; i &amp;lt; len - 1; i++) {
        for (var j = 0; j &amp;lt; len - 1 - i; j++) {
            if (arr[j] &amp;gt; arr[j+1]) {        // 相邻元素两两对比
                var temp = arr[j+1];        // 元素交换
                arr[j+1] = arr[j];
                arr[j] = temp;
            }
        }
    }
    return arr;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;选择排序selection-sort&quot;&gt;选择排序（Selection Sort）&lt;/h4&gt;
&lt;p&gt;选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-1&quot;&gt;算法描述&lt;/h5&gt;
&lt;p&gt;n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;初始状态：无序区为R[1..n]，有序区为空；&lt;/li&gt;
  &lt;li&gt;第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；&lt;/li&gt;
  &lt;li&gt;n-1趟结束，数组有序化了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示-1&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/04.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-1&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function selectionSort(arr) {
    var len = arr.length;
    var minIndex, temp;
    for (var i = 0; i &amp;lt; len - 1; i++) {
        minIndex = i;
        for (var j = i + 1; j &amp;lt; len; j++) {
            if (arr[j] &amp;lt; arr[minIndex]) {     // 寻找最小的数
                minIndex = j;                 // 将最小数的索引保存
            }
        }
        temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }
    return arr;
} 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;算法分析&quot;&gt;算法分析&lt;/h5&gt;
&lt;p&gt;表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。&lt;/p&gt;
&lt;h4 id=&quot;插入排序insertion-sort&quot;&gt;插入排序（Insertion Sort）&lt;/h4&gt;
&lt;p&gt;插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-2&quot;&gt;算法描述&lt;/h5&gt;
&lt;p&gt;一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;从第一个元素开始，该元素可以认为已经被排序；&lt;/li&gt;
  &lt;li&gt;取出下一个元素，在已经排序的元素序列中从后向前扫描；&lt;/li&gt;
  &lt;li&gt;如果该元素（已排序）大于新元素，将该元素移到下一位置；&lt;/li&gt;
  &lt;li&gt;重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；&lt;/li&gt;
  &lt;li&gt;将新元素插入到该位置后；&lt;/li&gt;
  &lt;li&gt;重复步骤2~5。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示-2&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/05.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-2&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function insertionSort(arr) {
    var len = arr.length;
    var preIndex, current;
    for (var i = 1; i &amp;lt; len; i++) {
        preIndex = i - 1;
        current = arr[i];
        while (preIndex &amp;gt;= 0 &amp;amp;&amp;amp; arr[preIndex] &amp;gt; current) {
            arr[preIndex + 1] = arr[preIndex];
            preIndex--;
        }
        arr[preIndex + 1] = current;
    }
    return arr;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;算法分析-1&quot;&gt;算法分析&lt;/h5&gt;
&lt;p&gt;插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。&lt;/p&gt;
&lt;h4 id=&quot;希尔排序shell-sort&quot;&gt;希尔排序（Shell Sort）&lt;/h4&gt;
&lt;p&gt;1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-3&quot;&gt;算法描述&lt;/h5&gt;
&lt;p&gt;先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;选择一个增量序列t1，t2，…，tk，其中ti&amp;gt;tj，tk=1；&lt;/li&gt;
  &lt;li&gt;按增量序列个数k，对序列进行k 趟排序；&lt;/li&gt;
  &lt;li&gt;每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示-3&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/06.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-3&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function shellSort(arr) {
    var len = arr.length,
        temp,
        gap = 1;
    while (gap &amp;lt; len / 3) {          // 动态定义间隔序列
        gap = gap * 3 + 1;
    }
    for (gap; gap &amp;gt; 0; gap = Math.floor(gap / 3)) {
        for (var i = gap; i &amp;lt; len; i++) {
            temp = arr[i];
            for (var j = i-gap; j &amp;gt; 0 &amp;amp;&amp;amp; arr[j]&amp;gt; temp; j-=gap) {
                arr[j + gap] = arr[j];
            }
            arr[j + gap] = temp;
        }
    }
    return arr;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;算法分析-2&quot;&gt;算法分析&lt;/h5&gt;
&lt;p&gt;希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。&lt;/p&gt;
&lt;h4 id=&quot;归并排序merge-sort&quot;&gt;归并排序（Merge Sort）&lt;/h4&gt;
&lt;p&gt;归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-4&quot;&gt;算法描述&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;把长度为n的输入序列分成两个长度为n/2的子序列；&lt;/li&gt;
  &lt;li&gt;对这两个子序列分别采用归并排序；&lt;/li&gt;
  &lt;li&gt;将两个排序好的子序列合并成一个最终的排序序列。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示-4&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/07.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-4&quot;&gt;代码实现&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function mergeSort(arr) {  // 采用自上而下的递归方法
    var len = arr.length;
    if (len &amp;lt; 2) {
        return arr;
    }
    var middle = Math.floor(len / 2),
        left = arr.slice(0, middle),
        right = arr.slice(middle);
    return merge(mergeSort(left), mergeSort(right));
}
 
function merge(left, right) {
    var result = [];
 
    while (left.length&amp;gt;0 &amp;amp;&amp;amp; right.length&amp;gt;0) {
        if (left[0] &amp;lt;= right[0]) {
            result.push(left.shift());
        } else {
            result.push(right.shift());
        }
    }
 
    while (left.length)
        result.push(left.shift());
 
    while (right.length)
        result.push(right.shift());
 
    return result;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;算法分析-3&quot;&gt;算法分析&lt;/h5&gt;
&lt;p&gt;归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。&lt;/p&gt;
&lt;h4 id=&quot;快速排序quick-sort&quot;&gt;快速排序（Quick Sort）&lt;/h4&gt;
&lt;p&gt;快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-5&quot;&gt;算法描述&lt;/h5&gt;
&lt;p&gt;快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;从数列中挑出一个元素，称为 “基准”（pivot）；&lt;/li&gt;
  &lt;li&gt;重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；&lt;/li&gt;
  &lt;li&gt;递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示-5&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/08.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-5&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function quickSort(arr, left, right) {
    var len = arr.length,
        partitionIndex,
        left = typeof left != 'number' ? 0 : left,
        right = typeof right != 'number' ? len - 1 : right;
 
    if (left &amp;lt; right) {
        partitionIndex = partition(arr, left, right);
        quickSort(arr, left, partitionIndex-1);
        quickSort(arr, partitionIndex+1, right);
    }
    return arr;
}
 
function partition(arr, left ,right) {     // 分区操作
    var pivot = left,                      // 设定基准值（pivot）
        index = pivot + 1;
    for (var i = index; i &amp;lt;= right; i++) {
        if (arr[i] &amp;lt; arr[pivot]) {
            swap(arr, i, index);
            index++;
        }       
    }
    swap(arr, pivot, index - 1);
    return index-1;
}
 
function swap(arr, i, j) {
    var temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;堆排序heap-sort&quot;&gt;堆排序（Heap Sort）&lt;/h4&gt;
&lt;p&gt;堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-6&quot;&gt;算法描述&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；&lt;/li&gt;
  &lt;li&gt;将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&amp;lt;=R[n]；&lt;/li&gt;
  &lt;li&gt;由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示-6&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/09.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-6&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;var len;    // 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量
 
function buildMaxHeap(arr) {   // 建立大顶堆
    len = arr.length;
    for (var i = Math.floor(len/2); i &amp;gt;= 0; i--) {
        heapify(arr, i);
    }
}
 
function heapify(arr, i) {     // 堆调整
    var left = 2 * i + 1,
        right = 2 * i + 2,
        largest = i;
 
    if (left &amp;lt; len &amp;amp;&amp;amp; arr[left] &amp;gt; arr[largest]) {
        largest = left;
    }
 
    if (right &amp;lt; len &amp;amp;&amp;amp; arr[right] &amp;gt; arr[largest]) {
        largest = right;
    }
 
    if (largest != i) {
        swap(arr, i, largest);
        heapify(arr, largest);
    }
}
 
function swap(arr, i, j) {
    var temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
 
function heapSort(arr) {
    buildMaxHeap(arr);
 
    for (var i = arr.length - 1; i &amp;gt; 0; i--) {
        swap(arr, 0, i);
        len--;
        heapify(arr, 0);
    }
    return arr;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;计数排序counting-sort&quot;&gt;计数排序（Counting Sort）&lt;/h4&gt;
&lt;p&gt;计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-7&quot;&gt;算法描述&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;找出待排序的数组中最大和最小的元素；&lt;/li&gt;
  &lt;li&gt;统计数组中每个值为i的元素出现的次数，存入数组C的第i项；&lt;/li&gt;
  &lt;li&gt;对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；&lt;/li&gt;
  &lt;li&gt;反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示-7&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/10.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-7&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function countingSort(arr, maxValue) {
    var bucket = new Array(maxValue + 1),
        sortedIndex = 0;
        arrLen = arr.length,
        bucketLen = maxValue + 1;
 
    for (var i = 0; i &amp;lt; arrLen; i++) {
        if (!bucket[arr[i]]) {
            bucket[arr[i]] = 0;
        }
        bucket[arr[i]]++;
    }
 
    for (var j = 0; j &amp;lt; bucketLen; j++) {
        while(bucket[j] &amp;gt; 0) {
            arr[sortedIndex++] = j;
            bucket[j]--;
        }
    }
 
    return arr;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;算法分析-4&quot;&gt;算法分析&lt;/h5&gt;
&lt;p&gt;计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。&lt;/p&gt;
&lt;h4 id=&quot;桶排序bucket-sort&quot;&gt;桶排序（Bucket Sort）&lt;/h4&gt;
&lt;p&gt;桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-8&quot;&gt;算法描述&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;设置一个定量的数组当作空桶；&lt;/li&gt;
  &lt;li&gt;遍历输入数据，并且把数据一个一个放到对应的桶里去；&lt;/li&gt;
  &lt;li&gt;对每个不是空的桶进行排序；&lt;/li&gt;
  &lt;li&gt;从不是空的桶里把排好序的数据拼接起来。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;图片演示&quot;&gt;图片演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/11.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-8&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function bucketSort(arr, bucketSize) {
    if (arr.length === 0) {
      return arr;
    }
 
    var i;
    var minValue = arr[0];
    var maxValue = arr[0];
    for (i = 1; i &amp;lt; arr.length; i++) {
      if (arr[i] &amp;lt; minValue) {
          minValue = arr[i];                // 输入数据的最小值
      } else if (arr[i] &amp;gt; maxValue) {
          maxValue = arr[i];                // 输入数据的最大值
      }
    }
 
    // 桶的初始化
    var DEFAULT_BUCKET_SIZE = 5;            // 设置桶的默认数量为5
    bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;
    var bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1;  
    var buckets = new Array(bucketCount);
    for (i = 0; i &amp;lt; buckets.length; i++) {
        buckets[i] = [];
    }
 
    // 利用映射函数将数据分配到各个桶中
    for (i = 0; i &amp;lt; arr.length; i++) {
        buckets[Math.floor((arr[i] - minValue) / bucketSize)].push(arr[i]);
    }
 
    arr.length = 0;
    for (i = 0; i &amp;lt; buckets.length; i++) {
        insertionSort(buckets[i]);                      // 对每个桶进行排序，这里使用了插入排序
        for (var j = 0; j &amp;lt; buckets[i].length; j++) {
            arr.push(buckets[i][j]);                     
        }
    }
 
    return arr;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;算法分析-5&quot;&gt;算法分析&lt;/h5&gt;
&lt;p&gt;桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。&lt;/p&gt;
&lt;h4 id=&quot;基数排序radix-sort&quot;&gt;基数排序（Radix Sort）&lt;/h4&gt;
&lt;p&gt;基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。&lt;/p&gt;
&lt;h5 id=&quot;算法描述-9&quot;&gt;算法描述&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;取得数组中的最大数，并取得位数；&lt;/li&gt;
  &lt;li&gt;arr为原始数组，从最低位开始取每个位组成radix数组；&lt;/li&gt;
  &lt;li&gt;对radix进行计数排序（利用计数排序适用于小范围数的特点）；&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;动图演示-8&quot;&gt;动图演示&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/learn/img/in-post/algorithm/12.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;代码实现-9&quot;&gt;代码实现&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// LSD Radix Sort
var counter = [];
function radixSort(arr, maxDigit) {
    var mod = 10;
    var dev = 1;
    for (var i = 0; i &amp;lt; maxDigit; i++, dev *= 10, mod *= 10) {
        for(var j = 0; j &amp;lt; arr.length; j++) {
            var bucket = parseInt((arr[j] % mod) / dev);
            if(counter[bucket]==null) {
                counter[bucket] = [];
            }
            counter[bucket].push(arr[j]);
        }
        var pos = 0;
        for(var j = 0; j &amp;lt; counter.length; j++) {
            var value = null;
            if(counter[j]!=null) {
                while ((value = counter[j].shift()) != null) {
                      arr[pos++] = value;
                }
          }
        }
    }
    return arr;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;算法分析-6&quot;&gt;算法分析&lt;/h5&gt;
&lt;p&gt;基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。&lt;/p&gt;

&lt;p&gt;基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n»k，因此额外空间需要大概n个左右。&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/learn/2019/03/01/algorithm/</link>
        <guid isPermaLink="true">http://localhost:4000/learn/2019/03/01/algorithm/</guid>
        
        <category>algorithm</category>
        
        
      </item>
    
  </channel>
</rss>
